// feels messy as hell...

var myAtoi = function(s) {
    if (s === ''){return 0}
    let noSpaces = s.trim()
    if (!/\d/.test(noSpaces)){return 0}
    let sign = 1
    if (noSpaces[0] === '-' || noSpaces[0] === '+'){
        sign = noSpaces[0] === '-' ? -1 : 1
        noSpaces = noSpaces.slice(1)
    }
    
    if (!noSpaces[0].match(/^[0-9]+$/)){
      return 0
    }
   
    const endIdx = noSpaces.split('').findIndex(e => !e.match(/^[0-9]+$/))

    let ans = endIdx === -1 ? noSpaces*sign : noSpaces.slice(0, endIdx)*sign

    if (ans > Math.pow(2,31)-1){
      return Math.pow(2,31)-1
    } else if (ans < -Math.pow(2,31)){
      return -Math.pow(2,31)
    } else {
      return ans
    }   
}

// Same idea but way cleaner from https://baffinlee.com/leetcode-javascript/problem/string-to-integer-atoi.html

var myAtoi = function(str) {
  var i = 0;
  var sign = 1;
  var res = 0;
  var len = str.length;
  var INT_MAX = 2147483647;
  var INT_MIN = - INT_MAX - 1;

  while (str[i] === ' ') i++;

  if (str[i] === '+' || str[i] === '-') {
    sign = str[i] === '+' ? 1 : -1;
    i++;
  }

  while (str[i] >= '0' && str[i] <= '9') {
    res = (res * 10) + (str[i] - 0);
    if (sign === 1 && res > INT_MAX) return INT_MAX;
    if (sign === -1 && res > INT_MAX + 1) return INT_MIN;
    i++;
  }

  return res * sign;
};
